/* Definition section */
%{
#include "y.tab.h"	/* header file generated by bison */
extern YYSTYPE yylval; //YYSTYPE
char *idvalue;
char *typevalue;
char *strvalue;
%}

/* Define regular expression label */
newline		[\n]
digit		[0-9]
letter		[a-zA-Z]
integer   	{digit}+
double    	{digit}+"."{digit}+
id		{letter}+({letter}|{digit})*
str 		([^"]|\"\")*
comm		([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*
comm2  		[^\n\r]*[\n\r]
ws 		[ \t]+


%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     {return PLUS; }
"-" 	{ return MINUS;}
"*" 	{return PRODUCT; }
"/" 	{return DIVIDE;}
"%"     {return MOD; }
"++"    { return INCREMENT;}
"--"    { return DECREMENT;}

 /* Relational */
">"		{ return GREATER_THAN; }
"<"		{ return LESS_THAN;}
">="	{ return GREATER_EQUAL;}
"<="	{ return LESS_EQUAL;}
"=="	{ return EQUAL;}
"!="	{ return NOT_EQUAL;}

 /* Assignment */
"="		{return ASSIGN; }
"+="	{return PLUS_ASSIGN; }
"-="	{return MINUS_ASSIGN; }
"*="	{return PRODUCT_ASSIGN; }
"/="	{return DIVIDE_ASSIGN; }
"%="	{return MOD_ASSIGN; }

 /* Logical */
"&&"	{return AND; }
"||"	{return OR; }
"!"		{return NOT; }

 /* Delimiters */
"("		{return LB; }
")"		{return RB; }
"{"		{return LCB; }
"}"		{return RCB; }

 /* Print Keywords */	
"print"		{return PRINT; }
"println"	{return PRINTLN; }

 /* Condition and Loop Keywords */
"if"		{return IF; }
"else"		{return ELSE; }
"for"		{return FOR; }

 /* Declaration Keywords */
"var"		{return VAR; }
"void"		{return VOID; }
"int"		{yylval.string=(char*)malloc(strlen(yytext+1));strcpy(yylval.string,yytext) ;return INT; }
"float32"	{yylval.string=(char*)malloc(strlen(yytext+1));strcpy(yylval.string,yytext) ;return FLOAT; }

 /* String Constant */
\"				        { BEGIN STRING_STATE;return LDQ;}
<STRING_STATE>\"		{ BEGIN INITIAL;return RDQ;}
<STRING_STATE>[^"]*		{ yylval.string=(char*)malloc(strlen(yytext+1));
							strcpy(yylval.string,yytext) ;}

 /* Number Constant */
{integer}	{yylval.i_val = atoi(yytext); return I_CONST; }
{double}	{yylval.f_val = atof(yytext); return F_CONST; }

 /* C type Comment */
"/*"				{ BEGIN COMMENT; }
<COMMENT>[^*\n]+	{ }
<COMMENT>\n			{ }
<COMMENT>"*"		{ }
<COMMENT>"*/"		{ BEGIN INITIAL; }

 /* C++ type Comment */
\/\/.*	{ }

 /* Variable ID */
 {id}       {yylval.string=(char*)malloc(strlen(yytext+1));strcpy(yylval.string,yytext) ;return ID;}

 /* others */

[\n]		{return NEWLINE;}
[ \t]		{ } /* Ignore */
[^; \t] 	{ } /* Ignore other charactor sets */
<<EOF>>     { return EOF;}

%%

int yywrap()
{
    return 1;
}
